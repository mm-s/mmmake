#!/bin/bash


# process project.xml and generate CMakeLists.txt fot cmake

prjfilename=project.xml
srcdir=$1
prj=$2
conf=$3
function usage {
  echo ""
  echo "mmmake_sh (shell script version) usage:"
  echo "  WARNING - DEPRECATED - the development of the shell version of mmmake has been discontinued in pro of the binary build"
  echo "  mmmake_sh <projects source directory> <project name> <debug|release>"
  echo ""
  echo "environment variables:"
  echo "   CMAKE_GENERATOR  (i.e.=\"CodeBlocks - Unix Makefiles\") see cmake --help for generators. defaults to KDevelop3"
  echo ""
  echo "example:"
  echo "  \$> ls"
  echo "  src/ release/"
  echo "  \$> mkdir debug"
  echo "  \$> cd debug"
  echo "  \$> mmmake ../src hifisim debug"
  echo ""
  echo "environment:"
  echo "  MMMAKE_CROSS=<toolset>"
  echo "     toolset can be any of:"
  echo "       MINGW32"
  echo ""
  echo "send greeting cards to:"
  echo "  Marcos Mayorga - mm@mm-studios.com"
#  echo "  Marcos Mayorga - marcos.f.mayorgaaguirre@boeing.com"
  echo "  BR&TE'2009 - 2017"
}

if [ ! -d $srcdir ]; then
	echo "**error: specified source directory does not exists"
	usage
	exit 1
fi
if [ ! -f $srcdir/$prj/$prjfilename ]; then
	echo "**error: specified project directory does not exists under $srcdir or doesn't contain '$prjfilename' file"
	usage
	exit 2
fi

if [ "x$conf" != "xdebug" ]; then
if [ "x$conf" != "xrelease" ]; then
		echo "**error: invalid configuration: must be either debug or release"
		usage
		exit 3
fi
fi

thisdir=`pwd`

if [ "x${srcdir:0:1}" != "x/" ]; then
	srcdir=$thisdir/$srcdir
fi

prjdir=$srcdir/$prj

if [ "x$prjdir" = "x" ]; then
	echo "**error: project directory not specified."
	exit 1
fi
if [ ! -d $prjdir ]; then
	echo "**error: project directory not found."
	exit 1
fi

if [ "x$MMMAKE_PREFIX" = "x" ]; then
if [ -d /usr/share/mmmake ]; then
	MMMAKE_PREFIX=/usr/share/mmmake
fi
fi

if [ "x$MMMAKE_PREFIX" = "x" ]; then
	MMMAKE_PREFIX=$srcdir/mmmake/share/mmmake
fi


echo "mmmake shared directory: $MMMAKE_PREFIX"
echo "source dir = $srcdir"


xsltdir=$MMMAKE_PREFIX
templatedir=$MMMAKE_PREFIX/templates
cmakemodules=$MMMAKE_PREFIX/cmakemodules

function expand_deps_0 {
	echo "" > edeps
	ed0_prj=$1
	ed0_tgt=$2
	expand_deps $ed0_prj $ed0_tgt
}
function expand_deps {
	ed_prj=$1
	ed_tgt=$2
	ed_deps=`xsltproc --stringparam tgt $ed_tgt $xsltdir/dependencies.xsl $srcdir/$ed_prj/$prjfilename`
	for ed_dep in $ed_deps; do
		echo "$ed_dep" >> edeps
		ed_prj=`echo $ed_dep | sed "s#\(.*\)->\(.*\)#\1#"`
		ed_tgt=`echo $ed_dep | sed "s#\(.*\)->\(.*\)#\2#"`
		expand_deps $ed_prj $ed_tgt
	done
}


function generate_cmake_project_files {
gcpf_prj=$1
gcpf_prjdir=$srcdir/$gcpf_prj

gcpf_prjxmlfile=$gcpf_prjdir/$prjfilename
echo "project file = $gcpf_prjxmlfile"
gcpf_prjname=`xsltproc $xsltdir/prjname.xsl $gcpf_prjxmlfile`
gcpf_prjversion=`xsltproc $xsltdir/prjversion.xsl $gcpf_prjxmlfile`

echo "generating $gcpf_prjdir/CMakeLists.txt"
#CMakeLists.txt root file
#cat $templatedir/root_CMakeLists.txt.template | sed "s-<MMMAKE_PRJNAME>-$gcpf_prjname-" | sed "s-<MMMAKE_PRJVERSION>-$gcpf_prjversion-" > $gcpf_prjdir/CMakeLists.txt

gcpf_libs=`xsltproc $xsltdir/targets_shared_libraries.xsl $gcpf_prjxmlfile`
gcpf_exes=`xsltproc $xsltdir/targets_executables.xsl $gcpf_prjxmlfile`
gcpf_modules="$gcpf_libs $gcpf_exes"

outf=$gcpf_prjdir/CMakeLists.txt

echo "" > $outf
echo "set(prjname $gcpf_prjname)" >> $outf
echo "set(version $gcpf_prjversion)" >> $outf
echo "" >> $outf
echo "project(\${prjname} CXX)" >> $outf

for gcpf_lib in $gcpf_modules; do
	echo "add_subdirectory($gcpf_lib)" >> $outf
done



#echo "shared libraries: $libs"
#echo "executables: $exes"
echo "modules: shared libraries:'$gcpf_libs' executables:'$gcpf_exes'"

#echo "generating CMakeLists.txt for targets (stage I: file scan)"
for gcpf_lib in $gcpf_modules; do
#	echo 
#	echo "    generating CMakeLists.txt for target '$lib'"

#	echo "    entering $srcdir/$lib to scan $lib"
	cd $gcpf_prjdir/$gcpf_lib
	outf=CMakeLists.txt
#	echo " writting in $prjdir/$lib/$outf"
	echo "#mmmake" > $outf

	if [ "x$gcpf_lib" != "xtest" ]; then
	echo "set(prjname $gcpf_lib)" >> $outf
	fi

	if [ "x$gcpf_lib" = "xtest" ]; then
		if [ -f config.cpp.template ]; then
			echo "set(DO_NOT_MODIFY_WARNING \"File automatically generated by CMAKE. Do not modify by hand or you will lose your changes.\")" >> $outf
			echo "configure_file(config.cpp.template \${CMAKE_CURRENT_SOURCE_DIR}/config.cpp)" >> $outf
			echo "" >> $outf
		fi
		if [ -f developers.h.template ]; then
			echo "if (EXISTS \${CMAKE_CURRENT_SOURCE_DIR}/developers.h)"  >> $outf
			echo ""  >> $outf
			echo "else (EXISTS \${CMAKE_CURRENT_SOURCE_DIR}/developers.h)"  >> $outf
			echo "	configure_file(developers.h.template \${CMAKE_CURRENT_SOURCE_DIR}/developers.h)"  >> $outf
			echo "endif (EXISTS \${CMAKE_CURRENT_SOURCE_DIR}/developers.h)"  >> $outf
		fi
	fi


	header_dirs=`find . -type f -name "*.hpp" -o -name "*.h" | sed "s-\(.*\)/.*-\1-" | sort | uniq | grep -v _off`
#	h_dirs=`find . -type f -name "*.h" | sed "s-\(.*\)/.*-\1-" | uniq`
#	cppp_dirs=`find . -type f -name "*.cpp" | sed "s-\(.*\)/.*-\1-" | uniq`
	cpp_dirs=`find . -type f -name "*.c" -o -name "*.cpp" | sed "s-\(.*\)/.*-\1-" | sort | uniq | grep -v _off`

#	header_dirs="$h_dirs $hpp_dirs"
#	cpp_dirs="$cppp_dirs $c_dirs"
#	echo "----> $cpp_dirs"
	for header_dir in $header_dirs; do
		if [ "x${header_dir}" = "x." ]; then 
			header_dir=
		fi
		identif=`echo "${header_dir}" | sed "s-^\./\(.*\)-\1-" | sed "s-/-_-"`
#		echo "    consideering $header_dir for headers directory as '$identif'"
		if [ "x${header_dir}" = "x" ]; then
			echo "file (GLOB ${identif}_headers *.h *.hpp)" >> $outf
		else
			echo "file (GLOB ${identif}_headers ${header_dir}/*.h ${header_dir}/*.hpp)" >> $outf
		fi
		echo "SOURCE_GROUP(\"${identif}\" FILES \${${identif}_headers})" >> $outf
	done
	for cpp_dir in $cpp_dirs; do
		if [ "x${cpp_dir}" = "x." ]; then 
			cpp_dir=
		fi
		identif=`echo "${cpp_dir}" | sed "s-^\./\(.*\)-\1-" | sed "s-/-_-"`
#		echo "    consideering $cpp_dir for sources directory as '$identif'"
		if [ "x${cpp_dir}" = "x" ]; then
			echo "file (GLOB ${identif}_sources *.cpp *.c)" >> $outf
		else
			echo "file (GLOB ${identif}_sources ${cpp_dir}/*.cpp ${cpp_dir}/*.c)" >> $outf
		fi
		echo "SOURCE_GROUP(\"${identif}\" FILES \${${identif}_sources})" >> $outf
	done

	echo -n "set(all_headers " >> $outf
	for header_dir in $header_dirs; do
		if [ "x${header_dir}" = "x." ]; then 
			header_dir=
		fi
		identif=`echo "${header_dir}" | sed "s-^\./\(.*\)-\1-" | sed "s-/-_-"`
		echo -n "\${${identif}_headers} " >> $outf
	done
	echo ")" >> $outf

	echo -n "set(all_sources " >> $outf
	for cpp_dir in $cpp_dirs; do
		if [ "x${cpp_dir}" = "x." ]; then 
			cpp_dir=
		fi
		identif=`echo "${cpp_dir}" | sed "s-^\./\(.*\)-\1-" | sed "s-/-_-"`
		echo -n "\${${identif}_sources} " >> $outf
	done
	echo ")" >> $outf
	echo "" >> $outf

done

#echo "generating CMakeLists.txt for targets (stage II: cmake target definition)"

#echo "definitions shared libraries & executables"
for gcpf_lib in $gcpf_modules; do
	cd $gcpf_prjdir/$gcpf_lib
	outf=CMakeLists.txt
	defs=`xsltproc --stringparam tgt $gcpf_lib $xsltdir/definitions.xsl $gcpf_prjxmlfile`
	echo "add_definitions($defs)" >> $outf
done

#echo "shared libraries"
for gcpf_lib in $gcpf_libs; do
	cd $gcpf_prjdir/$gcpf_lib
	outf=CMakeLists.txt
#	echo " writting in $prjdir/$lib/$outf"

	echo "" >> $outf
	echo "STRING(TOUPPER \${prjname} PRJNAME)" >> $outf
	echo "add_definitions(-D\${PRJNAME}_EXPORT_SYMBOLS) " >> $outf
	echo "" >> $outf

	echo "add_library(\${prjname} SHARED \${all_headers} \${all_sources})" >> $outf

	echo "" >> $outf
	echo "IF (MINGW)" >> $outf
	echo "SET_TARGET_PROPERTIES(\${prjname} PROPERTIES LINK_FLAGS \"-Wl,--output-def,\${LIBRARY_OUTPUT_PATH}/lib\${prjname}.def\")" >> $outf
	echo "ENDIF (MINGW)" >> $outf

done
#echo "executables"
for gcpf_lib in $gcpf_exes; do
	cd $gcpf_prjdir/$gcpf_lib
	outf=CMakeLists.txt
	if [ "x$gcpf_lib" = "xtest" ]; then
		echo "SET(prjname \${prjname}_test)" >> $outf
	fi

	echo "add_executable(\${prjname} \${all_headers} \${all_sources})" >> $outf
done
#echo "shared libraries & executables"
for gcpf_lib in $gcpf_modules; do
	cd $gcpf_prjdir/$gcpf_lib
	outf=CMakeLists.txt
#	echo " writting in $prjdir/$lib/$outf"
	echo "" >> $outf

#	cat $templatedir/module_CMakeLists.txt.template  >> $outf
#	echo "" >> $outf

	echo "set_target_properties(\${prjname} PROPERTIES DEBUG_OUTPUT_NAME \${prjname}\${DEBUG_TARGET_SUFFIX})" >> $outf	
	echo "set_target_properties(\${prjname} PROPERTIES RELEASE_OUTPUT_NAME \${prjname})" >> $outf
	if [ "x$MMMAKE_CROSS" = "xMINGW32" ]; then
		echo "set_target_properties(\${prjname} PROPERTIES PREFIX \"\" SUFFIX \".dll\")" >> $outf
	fi
	echo "" >> $outf


	echo "    computing dependencies for target '$gcpf_lib'"

	expand_deps_0 $gcpf_prj $gcpf_lib
	gcpf_all_tgt_deps=`cat edeps | sort | uniq`
	gcpf_all_prj_deps=`cat edeps | sed "s#\(.*\)->\(.*\)#\1#" | sort | uniq`
	rm edeps
	for gcpf_prj_dep in $gcpf_all_prj_deps; do
		echo "include_directories(\${PROJECTS_SRC_ROOT}/$gcpf_prj_dep)" >> $outf
	done

	echo "" >> 3pdeps
	for gcpf_tgt_dep in $gcpf_all_tgt_deps; do
		gcpf2_prj=`echo $gcpf_tgt_dep | sed "s#\(.*\)->\(.*\)#\1#"`
		gcpf2_tgt=`echo $gcpf_tgt_dep | sed "s#\(.*\)->\(.*\)#\2#"`
		echo "target_link_libraries(\${prjname} debug ${gcpf2_tgt}\${DEBUG_TARGET_SUFFIX} optimized ${gcpf2_tgt})" >> $outf
		echo "if (WIN32)" >> $outf
		echo " STRING(TOUPPER ${gcpf2_tgt} LIB)" >> $outf
		echo " add_definitions(-D\${LIB}_IMPORT_SYMBOLS)" >> $outf
		echo "endif(WIN32)" >> $outf
		echo "" >> $outf

		gcpf2_prjdir=$srcdir/$gcpf2_prj
		gcpf2_prjxmlfile=$gcpf2_prjdir/$prjfilename
		xsltproc --stringparam tgt $gcpf2_tgt $xsltdir/3pdependencies.xsl $gcpf2_prjxmlfile >> 3pdeps
	done
	xsltproc --stringparam tgt $gcpf_lib $xsltdir/3pdependencies.xsl $gcpf_prjxmlfile >> 3pdeps
	gcpf_treepd=`cat 3pdeps | sort | uniq`
	rm 3pdeps

	for gcpf_tgt3p_dep in $gcpf_treepd; do
		cat $templatedir/link_$gcpf_tgt3p_dep.cmake >> $outf
	done


done




}

function generate_cmake_root_project_file {
grpf_prj=$1
build_type=$2
grpf_prjdir=$srcdir/$grpf_prj
grpf_prjxmlfile=$grpf_prjdir/$prjfilename





if [ "x$build_type" != "xdebug" ]; then
if [ "x$build_type" != "xrelease" ]; then
echo "*** error: must pass either 'debug' or 'release' as argument"
return 1
fi
fi



cxxflags=""
if [ "x$CMAKE_CXX_FLAGS" != "x" ]; then
	cxxflags=$CMAKE_CXX_FLAGS
else
    echo "environment variable \${CMAKE_CXX_FLAGS} not set, defaults to $cxxflags"
fi

cxxflagsdebug="-O0 -g"
if [ "x$CMAKE_CXX_FLAGS_DEBUG" != "x" ]; then
	cxxflagsdebug=$CMAKE_CXX_FLAGS_DEBUG
else
    echo "environment variable \${CMAKE_CXX_FLAGS_DEBUG} not set, defaults to $cxxflagsdebug"
fi

cxxflagsrelease="-O3"
if [ "x$CMAKE_CXX_FLAGS_RELEASE" != "x" ]; then
	cxxflagsrelease=$CMAKE_CXX_FLAGS_RELEASE
else
    echo "environment variable \${CMAKE_CXX_FLAGS_RELEASE} not set, defaults to $cxxflagsrelease"
fi

cflags=""
if [ "x$CMAKE_C_FLAGS" != "x" ]; then
	cflags=$CMAKE_C_FLAGS
else
    echo "environment variable \${CMAKE_C_FLAGS} not set, defaults to $cflags"
fi

cflagsdebug="-O0 -g"
if [ "x$CMAKE_C_FLAGS_DEBUG" != "x" ]; then
	cflagsdebug=$CMAKE_C_FLAGS_DEBUG
else
    echo "environment variable \${CMAKE_C_FLAGS_DEBUG} not set, defaults to $cflagsdebug"
fi

cflagsrelease="-O3"
if [ "x$CMAKE_C_FLAGS_RELEASE" != "x" ]; then
	cflagsrelease=$CMAKE_C_FLAGS_RELEASE
else
    echo "environment variable \${CMAKE_C_FLAGS_RELEASE} not set, defaults to $cflagsrelease"
fi

debugsuffix=""
if [ "x$DEBUG_TARGET_SUFFIX" != "x" ]; then
	debugsuffix=$DEBUG_TARGET_SUFFIX
else
    echo "environment variable \${DEBUG_TARGET_SUFFIX} not set, defaults to $debugsuffix"
fi


cd $srcdir
outf=CMakeLists.txt
echo "" > $outf

echo "cmake_minimum_required(VERSION 2.6)" >> $outf
echo "project(hell)" >> $outf


echo "set(CMAKE_BUILD_TYPE $build_type CACHE STRING \"Value given by mmmake. Set through comand line.\" FORCE)" >> $outf
echo "set(INCLUDE_TEST_PROJECTS $cbuild_include_test_projects CACHE STRING \"Value given by mmmake. Possible override though env variable.\" FORCE)" >> $outf
echo "set(CMAKE_CXX_FLAGS \"$cxxflags\" CACHE STRING \"Value given by mmmake. Possible override though env variable.\" FORCE)" >> $outf
echo "set(CMAKE_CXX_FLAGS_DEBUG \"$cxxflagsdebug\" CACHE STRING \"Value given by mmmake. Possible override though env variable.\" FORCE)" >> $outf
echo "set(CMAKE_CXX_FLAGS_RELEASE \"$cxxflagsrelease\" CACHE STRING \"Value given by mmmake. Possible override though env variable.\" FORCE)" >> $outf
echo "set(CMAKE_C_FLAGS \"$cflags\" CACHE STRING \"Value given by mmmake. Possible override though env variable.\" FORCE)" >> $outf
echo "set(CMAKE_C_FLAGS_DEBUG \"$cflagsdebug\" CACHE STRING \"Value given by mmmake. Possible override though env variable.\" FORCE)" >> $outf
echo "set(CMAKE_C_FLAGS_RELEASE \"$cflagsrelease\" CACHE STRING \"Value given by mmmake. Possible override though env variable.\" FORCE)" >> $outf
echo "set(DEBUG_TARGET_SUFFIX \"$debugsuffix\" CACHE STRING \"Value given by mmmake. Possible override here.\")" >> $outf


echo "set(PROJECTS_SRC_ROOT \${CMAKE_SOURCE_DIR})" >> $outf
echo "set(PROJECTS_BIN_ROOT \${CMAKE_BINARY_DIR})" >> $outf
echo "set(BUILD_SANDBOX \${PROJECTS_BIN_ROOT}/sandbox)" >> $outf
echo "FILE(MAKE_DIRECTORY \${BUILD_SANDBOX})" >> $outf
echo "FILE(WRITE \${BUILD_SANDBOX}/hook \"this file is for cmake to find this directory\")" >> $outf
echo "FIND_PATH(EXECUTABLE_OUTPUT_PATH hook \${BUILD_SANDBOX} )" >> $outf
echo "FIND_PATH(LIBRARY_OUTPUT_PATH hook \${BUILD_SANDBOX} )" >> $outf
echo "LINK_DIRECTORIES(\${LIBRARY_OUTPUT_PATH})" >> $outf
echo "SET(CMAKE_MODULE_PATH \$ENV{CMAKE_MODULE_PATH})" >> $outf




grpf_libs=`xsltproc $xsltdir/targets_shared_libraries.xsl $grpf_prjxmlfile`
grpf_exes=`xsltproc $xsltdir/targets_executables.xsl $grpf_prjxmlfile`
grpf_modules="$grpf_libs $grpf_exes"

echo "$grpf_prj->drmay" > tedeps
for grpf_lib in $grpf_modules; do
	expand_deps_0 $grpf_prj $grpf_lib
	cat edeps >> tedeps
done
rm edeps

grpf_all_prj_deps=`cat tedeps | sed "s#\(.*\)->\(.*\)#\1#" | sort | uniq`
rm tedeps

xsltproc $xsltdir/3pdependencies.xsl $grpf_prjxmlfile > 3pdeps
for grpf_prj_dep in $grpf_all_prj_deps; do
	grpf_prjdir=$srcdir/$grpf_prj_dep
	grpf_prjxmlfile=$grpf_prjdir/$prjfilename
	xsltproc $xsltdir/3pdependencies.xsl $grpf_prjxmlfile >> 3pdeps
done

grpf_treepd=`cat 3pdeps | sort | uniq`
rm 3pdeps

for grpf_tp in $grpf_treepd; do
	#hack boost once this old script is only dedicated to build mmmake itself
	if [ "_$grpf_tp" == "_boost" ]; then
		echo "" >> $outf
		echo "set(MMAKE_COMPONENTS filesystem system)" >> $outf
		echo "" >> $outf
	fi

	echo "" >> $outf
	cat "$templatedir/use_$grpf_tp.cmake" >> $outf
	echo "" >> $outf
done

echo "" >> $outf

for grpf_prj_dep in $grpf_all_prj_deps; do
	echo "add_subdirectory($grpf_prj_dep)" >> $outf
done

}


function invoke_cmake {
curdir=`pwd`

cmakesrcrootdir=$1

rootcmakefile=${cmakesrcrootdir}/CMakeLists.txt

filecount=`ls -laf $curdir | wc -m`
if [ "x$filecount" != "x5" ]; then
  echo "directory not empty"
#  return 2
#  echo "*** error: directory not empty. This script must be run inside an empty directory"
fi

if [ ! -f $rootcmakefile ]; then
  echo "*** error: CMakeLists.txt not found under source dir specified ($rootcmakefile)"
  return 3
fi


cmakegen="KDevelop3"
if [ "x${CMAKE_GENERATOR}" != "x" ]; then
	cmakegen=${CMAKE_GENERATOR}
else
    echo "environment variable \${CMAKE_GENERATOR} not set, defaults to $cmakegen"
fi

builddir=$curdir

if [ "x$MMMAKE_CROSS" = "xMINGW32" ]; then
    toolset=i586-mingw32msvc
	export CC=${toolset}-gcc
	export CXX=${toolset}-g++
	export LD=${toolset}-ld
	export AR=${toolset}-ar
	export AS=${toolset}-as
	export NM=${toolset}-nm
	export STRIP=${toolset}-strip
	export RANLIB=${toolset}-ranlib
	export DLLTOOL=${toolset}-dlltool
	export OBJDUMP=${toolset}-objdump
	export RESCOMP=${toolset}-windres 
else
	export CC=
	export CXX=
	export LD=
	export AR=
	export AS=
	export NM=
	export STRIP=
	export RANLIB=
	export DLLTOOL=
	export OBJDUMP=
	export RESCOMP=
fi
	CMAKE_MODULE_PATH=${cmakemodules} cmake -G "${cmakegen}" -D CMAKE_INSTALL_PREFIX:STRING="${curdir}/inst" ${cmakesrcrootdir}

}

function generate_cmake_project_files_for_dependant {
	gfd_prj=$1
	gfd_prjdir=$srcdir/$prj
	gfd_prjxmlfile=$gfd_prjdir/$prjfilename
	cd $srcdir

	gfd_libs=`xsltproc $xsltdir/targets_shared_libraries.xsl $gfd_prjxmlfile`
	gfd_exes=`xsltproc $xsltdir/targets_executables.xsl $gfd_prjxmlfile`
	gfd_modules="$gfd_libs $gfd_exes"
	
	echo "" > tedeps
	for gfd_lib in $gfd_modules; do
		echo "$gfd_prj->$gfd_lib" >> tedeps
		expand_deps_0 $gfd_prj $gfd_lib
		cat edeps >> tedeps
	done
	rm edeps
	gfd_all_prj_deps=`cat tedeps | sed "s#\(.*\)->\(.*\)#\1#" | sort | uniq`
	rm tedeps

	for gfd_prj_dep in $gfd_all_prj_deps; do
		generate_cmake_project_files $gfd_prj_dep
	done
}

generate_cmake_root_project_file $prj $conf
generate_cmake_project_files_for_dependant $prj



cd $thisdir
invoke_cmake $srcdir
ret=$?
cd $thisdir
if [ "x$ret" = "x2" ]; then
   cmake .
fi

exit $ret




